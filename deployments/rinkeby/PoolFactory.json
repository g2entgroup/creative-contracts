{
  "address": "0xB45C57ccd192cbe3248b59fFE0D70962C87533Af",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_twitterVerifyAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "linkTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rngAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "Pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "PoolOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "SubmissionEndTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "FanVotingEndTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "BrandVotingEndTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "CampaignEndtime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "PoolId",
          "type": "uint256"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "LINK_CONTRACT_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TWITTER_VERIFY_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowPoolCreation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_bool",
          "type": "bool"
        }
      ],
      "name": "changePoolCreationBool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_poolName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_capital",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_capitalAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_campaignLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_votingLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_decisionLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_submissionLength",
          "type": "uint256"
        }
      ],
      "name": "createPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPoolCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setTwitterVerifyAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa0bf4d493aaeb2a57cad05071f8cd8727a23103df90333c5c781cc29ab09d59f",
  "receipt": {
    "to": null,
    "from": "0x1Fde40a4046Eda0cA0539Dd6c77ABF8933B94260",
    "contractAddress": "0xB45C57ccd192cbe3248b59fFE0D70962C87533Af",
    "transactionIndex": 19,
    "gasUsed": "3286729",
    "logsBloom": "0x
    "blockHash": "0x11ff7b2e19b464f2893121f187ddf251586e0f4cfe392f5d58265b394e9d0bdb",
    "transactionHash": "0xa0bf4d493aaeb2a57cad05071f8cd8727a23103df90333c5c781cc29ab09d59f",
    "logs": [
      {
        "transactionIndex": 19,
        "blockNumber": 9203284,
        "transactionHash": "0xa0bf4d493aaeb2a57cad05071f8cd8727a23103df90333c5c781cc29ab09d59f",
        "address": "0xB45C57ccd192cbe3248b59fFE0D70962C87533Af",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001fde40a4046eda0ca0539dd6c77abf8933b94260"
        ],
        "data": "0x",
        "logIndex": 30,
        "blockHash": "0x11ff7b2e19b464f2893121f187ddf251586e0f4cfe392f5d58265b394e9d0bdb"
      }
    ],
    "blockNumber": 9203284,
    "cumulativeGasUsed": "5275705",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0ed9438215467CEbEa9D8A0D394E913096f6e9BF",
    "0x8825d49dea3a8fc5643217f61217fe5d0564e616",
    "0xD17C79631eAE76270ea2ACe8d107C258dfC77397"
  ],
  "solcInputHash": "591f6a05ebf0220bc1b8e11b0508e3f4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_twitterVerifyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"linkTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rngAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"PoolOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"SubmissionEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"FanVotingEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"BrandVotingEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"CampaignEndtime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"PoolId\",\"type\":\"uint256\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LINK_CONTRACT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TWITTER_VERIFY_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowPoolCreation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"changePoolCreationBool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_poolName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_capital\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_capitalAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_campaignLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_votingLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decisionLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_submissionLength\",\"type\":\"uint256\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setTwitterVerifyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"PoolCreated(address,address,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"emitted when a pool is created\",\"params\":{\"BrandVotingEndTime\":\"unix timestamp for when the brand voting period is over\",\"CampaignEndtime\":\"unix timestamp for when the campaign is over\",\"FanVotingEndTime\":\"unix timestamp for when the fan voting period is over\",\"Pool\":\"the address of the pool\",\"PoolId\":\"the id this pool is stored under in poolList*\",\"PoolOwner\":\"the address of the pool owner\",\"SubmissionEndTime\":\"unix timestamp for when the submission period is over\"}}},\"kind\":\"dev\",\"methods\":{\"createPool(string,uint256,address,address,uint256,uint256,uint256,uint256)\":{\"details\":\"Allows caller to create a custom brand pool, as long as they are verified, and have approved the contract to spend 0.1 Link  TODO add require checks to make sure inputs are logical*\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PoolFactory.sol\":\"PoolFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\ninterface iRandomNumberGenerator {\\r\\n    function getRandomNumber(uint256 userProvidedSeed)\\r\\n        external\\r\\n        returns (bytes32 requestId);\\r\\n\\r\\n    function seeRandomNumber() external returns (uint256);\\r\\n}\\r\\n\\r\\n//TODO instead of distributing rewards, there should be a new settling contract created where the artist and brand can have a back and forth over the design of the final NFT\\r\\n//This contract would pay out the rewards\\r\\n//TODO add support for another ERC20 token that can be used as a prize pool for first second and third submissions.\\r\\ncontract Pool {\\r\\n    address public poolOwner;\\r\\n    IERC20 private token; //The input token for the pool campaign usually CRTV\\r\\n    IERC721 private nft;\\r\\n    iRandomNumberGenerator private rng;\\r\\n    string public poolName; //Brand can call the pool whatever they want IE \\\"Campaign to design the next Coca Cola Bear NFT\\\"\\r\\n    string public brandName; //Pulled from Twitter handle is not changeable\\r\\n    uint256 public funds; //Capital Pool owner deposits to start pool!\\r\\n    uint256 public submissionEndTime;\\r\\n    uint256 public fanVotingEndTime;\\r\\n    uint256 public brandVotingEndTime;\\r\\n    uint256 public campaignEndTime;\\r\\n    bool public topTenFound;\\r\\n    uint256[10] public topTen;\\r\\n    uint256[10] public topTenAmount;\\r\\n    uint256[] finalists;\\r\\n    uint256[] finalistsAmounts;\\r\\n    uint256 winningSubmission; // Index of the winning submission\\r\\n    uint256 userDeposit; // Amount of funds required to make a submission and vote\\r\\n    bool winnerSelected;\\r\\n    uint256 searchIndex; //stores the last index that was cheked for top ten calcualtion\\r\\n    bool checkedForTies;\\r\\n    uint256 finalistsCount;\\r\\n    bool public backedByFunds;\\r\\n\\r\\n    struct User {\\r\\n        address user;\\r\\n        uint256 amount;\\r\\n    }\\r\\n\\r\\n    struct submission {\\r\\n        uint256[] nftList;\\r\\n        mapping(address => uint256) userIndex;\\r\\n        User[] users;\\r\\n        uint256 userCount;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => submission) public submissions;\\r\\n    uint256 submissionCount = 1;\\r\\n\\r\\n    /**\\r\\n     * @dev emitted when a pool is backed with enough campaign funds\\r\\n     * @param PoolAddress address of the pool\\r\\n     * @param PoolName name of the pool\\r\\n     * @param BrandName name of the brand running the campaign\\r\\n     * @param BackedByFunds bool showing whether the pool is backed by funds for not.\\r\\n     **/\\r\\n    event PoolBacked(\\r\\n        address PoolAddress,\\r\\n        string PoolName,\\r\\n        string BrandName,\\r\\n        bool BackedByFunds\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev emitted when a pool owner changes the pool name\\r\\n     * @param PoolAddress address of the pool\\r\\n     * @param PoolName name of the pool\\r\\n     * @param BrandName name of the brand running the campaign\\r\\n     **/\\r\\n    event PoolNameChanged(\\r\\n        address PoolAddress,\\r\\n        string PoolName,\\r\\n        string BrandName\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev emitted when an artist created a submission\\r\\n     * @param PoolAddress address of the pool\\r\\n     * @param PoolName name of the pool\\r\\n     * @param BrandName name of the brand running the campaign\\r\\n     * @param SubmissionNumber the number assigned to this submission, when emitted this also represents total submission count\\r\\n     * @param ArtistAddress the address of the artist who created the submission\\r\\n     * @param NFTsInSubmission an array of uints that hold the token ids of the NFTs in the submission\\r\\n     **/\\r\\n    event SubmissionCreated(\\r\\n        address PoolAddress,\\r\\n        string PoolName,\\r\\n        string BrandName,\\r\\n        uint256 SubmissionNumber,\\r\\n        address ArtistAddress,\\r\\n        uint256[3] NFTsInSubmission\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev emitted when a fan votes on a submission\\r\\n     * @param PoolAddress address of the pool\\r\\n     * @param PoolName name of the pool\\r\\n     * @param BrandName name of the brand running the campaign\\r\\n     * @param SubmissionNumber the submission number the fan voted for\\r\\n     * @param Voter the address of the fan that made the vote\\r\\n     * @param NewVoteCount the new total vote count for that submission\\r\\n     **/\\r\\n    event VoteSubmitted(\\r\\n        address PoolAddress,\\r\\n        string PoolName,\\r\\n        string BrandName,\\r\\n        uint256 SubmissionNumber,\\r\\n        address Voter,\\r\\n        uint256 NewVoteCount\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev emitted when the Top Ten list changes from a fan vote\\r\\n     * @param PoolAddress address of the pool\\r\\n     * @param PoolName name of the pool\\r\\n     * @param BrandName name of the brand running the campaign\\r\\n     * @param TopTen the top ten submissions, an array of indexes, so if submission 1 is in it, 1 would be in the top ten\\r\\n     **/\\r\\n    event NewTopTen(\\r\\n        address PoolAddress,\\r\\n        string PoolName,\\r\\n        string BrandName,\\r\\n        uint256[10] TopTen\\r\\n        );\\r\\n\\r\\n    /**\\r\\n     * @dev emitted when finalists list has been created\\r\\n     * @param PoolAddress address of the pool\\r\\n     * @param PoolName name of the pool\\r\\n     * @param BrandName name of the brand running the campaign\\r\\n     * @param Finalists an array of of indexing corresponding to the submission numbers that are finalists\\r\\n     **/\\r\\n    event SeeFinalists(\\r\\n        address PoolAddress,\\r\\n        string PoolName,\\r\\n        string BrandName,\\r\\n        uint256[] Finalists\\r\\n        );\\r\\n\\r\\n        /**\\r\\n     * @dev emitted when the winner is chosen\\r\\n     * @param PoolAddress address of the pool\\r\\n     * @param PoolName name of the pool\\r\\n     * @param BrandName name of the brand running the campaign\\r\\n     * @param Winner the winning submission number\\r\\n     **/\\r\\n    event WinnerSelected(\\r\\n        address PoolAddress,\\r\\n        string PoolName,\\r\\n        string BrandName,\\r\\n        uint256 Winner\\r\\n        );\\r\\n\\r\\n    /**\\r\\n     * @dev emitted when a someone calls cashout\\r\\n     * @param PoolAddress address of the pool\\r\\n     * @param PoolName name of the pool\\r\\n     * @param BrandName name of the brand running the campaign\\r\\n     * @param SubmissionNumber the submission number the fan voted for\\r\\n     * @param Caller the address of the caller who cashed out\\r\\n     **/\\r\\n    event CashedOut(\\r\\n        address PoolAddress,\\r\\n        string PoolName,\\r\\n        string BrandName,\\r\\n        uint256 SubmissionNumber,\\r\\n        address Caller\\r\\n    );\\r\\n\\r\\n    //TODO add in event for when settling contract is created\\r\\n\\r\\n    /**\\r\\n     * @dev functions affected by this modifier can only be called by the pool owner\\r\\n     **/\\r\\n    modifier onlyPoolOwner() {\\r\\n        require(\\r\\n            msg.sender == poolOwner,\\r\\n            \\\"Only the Pool Owner can call this function!\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev functions affected by this modifier can only be called by fans\\r\\n     **/\\r\\n    modifier onlyFans() {\\r\\n        require(msg.sender != poolOwner, \\\"Only Fans can call this function!\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev functions affected by this modifier are onyl callable\\r\\n     * when the pool has been backed by funds\\r\\n     **/\\r\\n    modifier checkFunds() {\\r\\n        require(backedByFunds, \\\"Pool is not backed by funds!\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        string memory _poolName,\\r\\n        string memory _brandName,\\r\\n        uint256 _capital,\\r\\n        address _capitalAddress,\\r\\n        address _nftAddress,\\r\\n        address _poolOwner,\\r\\n        address _rng,\\r\\n        uint256 _campaignLength,\\r\\n        uint256 _votingLength,\\r\\n        uint256 _decisionLength,\\r\\n        uint256 _submissionLength\\r\\n    ) {\\r\\n        poolOwner = _poolOwner;\\r\\n        funds = _capital;\\r\\n        token = IERC20(_capitalAddress);\\r\\n\\r\\n        userDeposit = funds / 10;\\r\\n        nft = IERC721(_nftAddress);\\r\\n        rng = iRandomNumberGenerator(_rng);\\r\\n\\r\\n        poolName = _poolName;\\r\\n        brandName = _brandName;\\r\\n        uint256 currentTime = block.timestamp;\\r\\n        submissionEndTime = currentTime + _submissionLength;\\r\\n        fanVotingEndTime = submissionEndTime + _votingLength;\\r\\n        brandVotingEndTime = fanVotingEndTime + _decisionLength;\\r\\n        campaignEndTime = currentTime + _campaignLength;\\r\\n    }\\r\\n\\r\\n    function getName() external view returns (string memory) {\\r\\n        return poolName;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev After a pool is created, the owner needs to transfer the funds to the pool in order to back it\\r\\n     **/\\r\\n    function backPool() external onlyPoolOwner {\\r\\n        require(!backedByFunds, \\\"Pool already backed by funds!\\\");\\r\\n        require(\\r\\n            token.transferFrom(msg.sender, address(this), funds),\\r\\n            \\\"trandferFrom failed, pool not backed by funds!\\\"\\r\\n        );\\r\\n        backedByFunds = true;\\r\\n        emit PoolBacked(address(this), poolName, brandName, backedByFunds);\\r\\n    }\\r\\n\\r\\n    function changeName(string memory _name) external onlyPoolOwner {\\r\\n        poolName = _name;\\r\\n        emit PoolNameChanged(address(this), poolName, brandName);\\r\\n    }\\r\\n\\r\\n    function seePoolBacking() external view returns (uint256) {\\r\\n        return token.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function getTopTen() external view returns (uint256[10] memory) {\\r\\n        return topTen;\\r\\n    }\\r\\n\\r\\n    function getTopTenAmount() external view returns (uint256[10] memory) {\\r\\n        return topTenAmount;\\r\\n    }\\r\\n\\r\\n    function getfinalists() external view returns (uint256[] memory) {\\r\\n        return finalists;\\r\\n    }\\r\\n\\r\\n    function getfinalistsAmount() external view returns (uint256[] memory) {\\r\\n        return finalistsAmounts;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev allow artists to create submissions\\r\\n     * Require artist to transfer userDeposit, and to transfer NFTs\\r\\n     * @param nfts Array of 3 nfts to transfer to the contract\\r\\n     **/\\r\\n    function createSubmission(uint256[3] memory nfts) external checkFunds {\\r\\n        require(\\r\\n            block.timestamp < submissionEndTime,\\r\\n            \\\"Can not add submissions during the fan voting period\\\"\\r\\n        );\\r\\n        require(\\r\\n            token.transferFrom(msg.sender, address(this), userDeposit),\\r\\n            \\\"trandferFrom failed, submission not backed by funds!\\\"\\r\\n        );\\r\\n        for (uint256 i = 0; i < 3; i++) {\\r\\n            nft.transferFrom(msg.sender, address(this), nfts[i]); //Transfer them to the contract Think we need to do a require, we could require the nft owner is the conrtact?\\r\\n            submissions[submissionCount].nftList.push(nfts[i]);\\r\\n        }\\r\\n        User memory artist = User({user: msg.sender, amount: userDeposit});\\r\\n        submissions[submissionCount].userIndex[msg.sender] = 0; //Set artist as the 0 index\\r\\n        submissions[submissionCount].userCount++;\\r\\n        submissions[submissionCount].users.push(artist);\\r\\n        emit SubmissionCreated(address(this), poolName, brandName, submissionCount, msg.sender, nfts);\\r\\n        submissionCount++;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev allow fans to vote on submissions\\r\\n     * Require caller transfers userDeposit to contract\\r\\n     * @param _submissionNumber the number of the submission the fan wants to vote for\\r\\n     **/\\r\\n    function fanVote(uint256 _submissionNumber) external onlyFans checkFunds {\\r\\n        //TODO I think its okay to read the zero address of an empty array, I am assuming it returns zero but I need to verify this!\\r\\n        require(\\r\\n            msg.sender != submissions[_submissionNumber].users[0].user,\\r\\n            \\\"Artist can not vote for their own submission!\\\"\\r\\n        );\\r\\n        require(\\r\\n            block.timestamp >= submissionEndTime,\\r\\n            \\\"Can not start voting until submission period is over!\\\"\\r\\n        );\\r\\n        require(\\r\\n            block.timestamp <= brandVotingEndTime,\\r\\n            \\\"Fan Voting Period is Over!\\\"\\r\\n        );\\r\\n        require(\\r\\n            submissions[_submissionNumber].nftList[0] > 0,\\r\\n            \\\"There are no NFTs in this submission!\\\"\\r\\n        );\\r\\n        require(\\r\\n            token.transferFrom(msg.sender, address(this), userDeposit),\\r\\n            \\\"trandferFrom failed, vote not backed by funds!\\\"\\r\\n        );\\r\\n\\r\\n        //Check if the user is already in the submission and thorw an error if they are!\\r\\n        for (uint256 i = 1; i < submissions[_submissionNumber].userCount; i++) {\\r\\n            if (msg.sender == submissions[_submissionNumber].users[i].user) {\\r\\n                require(false, \\\"User has already voted for this submission!\\\");\\r\\n            }\\r\\n        }\\r\\n        // If user isn't in the submission, then add them!\\r\\n        User memory fan = User({user: msg.sender, amount: userDeposit});\\r\\n        submissions[_submissionNumber].users.push(fan);\\r\\n        submissions[_submissionNumber].userCount++;\\r\\n\\r\\n        //Calculate submission vote count\\r\\n        uint256 votes =\\r\\n            (submissions[_submissionNumber].userCount - 1) * userDeposit;\\r\\n\\r\\n        //Find topten submission with least amount of votes\\r\\n        uint256 smallStake = topTenAmount[0];\\r\\n        uint256 indexSmall = 0;\\r\\n        for (uint256 i = 0; i < 10; i++) {\\r\\n            if (topTenAmount[i] < smallStake) {\\r\\n                smallStake = topTenAmount[i];\\r\\n                indexSmall = i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        //Check if the submission is already in the top ten\\r\\n        bool alreadyInTopTen = false;\\r\\n        for (uint256 i = 0; i < 10; i++) {\\r\\n            if (topTen[i] == _submissionNumber) {\\r\\n                alreadyInTopTen = true;\\r\\n                topTenAmount[i] = votes;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        //Check if this submissions vote count is greater than the smallest. If it is replace it\\r\\n        if (!alreadyInTopTen && (votes > topTenAmount[indexSmall])) {\\r\\n            topTenAmount[indexSmall] = votes;\\r\\n            topTen[indexSmall] = _submissionNumber;\\r\\n            emit NewTopTen(address(this), poolName, brandName, topTen);\\r\\n        }\\r\\n\\r\\n        emit VoteSubmitted(address(this), poolName, brandName, _submissionNumber, msg.sender, votes);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function scans through top ten list, and finds entry with lowest vote count\\r\\n     * then function scans through all submissions and if it finds a submission with\\r\\n     * an equal vote count to the lowest in the top ten, it adds it to the finalist\\r\\n     * array.\\r\\n     * Function also adds top ten list to the finalists array\\r\\n     * Function also pings RNG contract to generate a new random number for when\\r\\n     * selectWinner is called\\r\\n     * ***WARNING unbounded for loop when looking through submissions!!!***\\r\\n     * Might want to add a hard cap on submissions to avoid this.\\r\\n     **/\\r\\n    function checkForTies() external onlyPoolOwner {\\r\\n        require(\\r\\n            block.timestamp > fanVotingEndTime,\\r\\n            \\\"Cannot select top ten until fan voting is over!\\\"\\r\\n        );\\r\\n        require(block.timestamp < campaignEndTime, \\\"Decision period is over!\\\");\\r\\n        require(!checkedForTies, \\\"Already checked for ties\\\");\\r\\n\\r\\n        uint256 smallStake = topTenAmount[0];\\r\\n        uint256 indexSmall = 0;\\r\\n        for (uint256 i = 0; i < 10; i++) {\\r\\n            finalists.push(topTen[i]);\\r\\n            finalistsAmounts.push(topTenAmount[i]);\\r\\n            finalistsCount++;\\r\\n            if (topTenAmount[i] < smallStake) {\\r\\n                smallStake = topTenAmount[i];\\r\\n                indexSmall = i;\\r\\n            }\\r\\n        }\\r\\n        uint256 tmpAmount;\\r\\n        bool inTopTen;\\r\\n        for (uint256 i = 1; i < submissionCount; i++) {\\r\\n            tmpAmount = (submissions[i].userCount - 1) * userDeposit;\\r\\n            if (smallStake == tmpAmount) {\\r\\n                inTopTen = false;\\r\\n                for (uint256 j = 0; j < 10; j++) {\\r\\n                    //Only want to check if it is in the first top ten, don't need to go through all finalists!\\r\\n                    if (finalists[j] == i) {\\r\\n                        inTopTen = true;\\r\\n                        break;\\r\\n                    }\\r\\n                }\\r\\n                if (!inTopTen) {\\r\\n                    finalists.push(i);\\r\\n                    finalistsAmounts.push(tmpAmount);\\r\\n                    finalistsCount++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        checkedForTies = true;\\r\\n        rng.getRandomNumber(block.timestamp);\\r\\n        emit SeeFinalists(address(this), poolName, brandName, finalists);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to choose the winning submission, create a settling contract, and choose a lucky fan\\r\\n     * @param submissionIndex index of the winning submission\\r\\n     * TODO Remove reward distribution and instead create a settling contract\\r\\n     **/\\r\\n    function selectWinner(uint256 submissionIndex) external onlyPoolOwner {\\r\\n        require(!winnerSelected, \\\"Already selected winner!\\\");\\r\\n        require(\\r\\n            block.timestamp > campaignEndTime,\\r\\n            \\\"Can only choose a winner after the campaign is over!\\\"\\r\\n        );\\r\\n        require(checkedForTies, \\\"You have to call checkForTies first!\\\");\\r\\n        winnerSelected = true;\\r\\n        bool winnerInTopTen;\\r\\n        for (uint256 i = 0; i < finalistsCount; i++) {\\r\\n            if (submissionIndex == finalists[i]) {\\r\\n                winnerInTopTen = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        require(\\r\\n            winnerInTopTen,\\r\\n            \\\"You must select a winner from the top ten list!\\\"\\r\\n        );\\r\\n        winningSubmission = submissionIndex;\\r\\n        //distribute awards\\r\\n        /*\\r\\n        nft.transferFrom(\\r\\n            address(this),\\r\\n            submissions[winningSubmission].users[0].user,\\r\\n            submissions[winningSubmission].nftList[0]\\r\\n        );\\r\\n        uint256 winnerIndex =\\r\\n            (rng.seeRandomNumber() %\\r\\n                (submissions[submissionIndex].userCount - 1)) + 1;\\r\\n        address luckyFan = submissions[submissionIndex].users[winnerIndex].user;\\r\\n        nft.transferFrom(\\r\\n            address(this),\\r\\n            luckyFan,\\r\\n            submissions[winningSubmission].nftList[1]\\r\\n        );\\r\\n        nft.transferFrom(\\r\\n            address(this),\\r\\n            poolOwner,\\r\\n            submissions[winningSubmission].nftList[2]\\r\\n        );\\r\\n        token.transfer(poolOwner, funds);\\r\\n        */\\r\\n        emit WinnerSelected(address(this), poolName, brandName, winningSubmission);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function allows artists and fans to cashout from their submissions\\r\\n     **/\\r\\n    function cashout(uint256 _submissionNumber) external {\\r\\n        require(\\r\\n            block.timestamp > campaignEndTime,\\r\\n            \\\"Can not cashout until campaign is over!\\\"\\r\\n        );\\r\\n        require(\\r\\n            msg.sender != poolOwner,\\r\\n            \\\"Pool Owner must cashout via settling contract\\\"\\r\\n        );\\r\\n        require(_submissionNumber != 0, \\\"There is no zero submission!\\\");\\r\\n        bool userFound;\\r\\n        uint256 index;\\r\\n        for (uint256 i = 0; i < submissions[_submissionNumber].userCount; i++) {\\r\\n            if (submissions[_submissionNumber].users[i].user == msg.sender) {\\r\\n                userFound = true;\\r\\n                index = i;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        uint256 tmpBal = submissions[_submissionNumber].users[index].amount;\\r\\n        submissions[_submissionNumber].users[index].amount = 0;\\r\\n        if (userFound && index == 0) {\\r\\n            //This is an artist that needs to withdraw funds and NFTS\\r\\n            //Send back their NFTs if they arent the winner, and their funds. If they are the winner then just send back the funds\\r\\n            require(token.transfer(msg.sender, tmpBal));\\r\\n            if (_submissionNumber != winningSubmission) {\\r\\n                for (uint256 i = 0; i < 3; i++) {\\r\\n                    nft.transferFrom(\\r\\n                        address(this),\\r\\n                        msg.sender,\\r\\n                        submissions[_submissionNumber].nftList[i]\\r\\n                    ); //Transfer them to the contract Think we need to do a require, we could require the nft owner is the conrtact?\\r\\n                }\\r\\n                submissions[_submissionNumber].nftList = [0, 0, 0]; //Set the nftList equal to a list of zeroes\\r\\n            }\\r\\n        } else if (userFound) {\\r\\n            //This is a fan that just needs their tokens back\\r\\n            require(token.transfer(msg.sender, tmpBal));\\r\\n        } else {\\r\\n            require(false, \\\"User was not found in submission!\\\");\\r\\n        }\\r\\n        emit CashedOut(address(this), poolName, brandName, _submissionNumber, msg.sender);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x680b1b8368577a082195e0ccdc42ed1dc170328f4ef08466ec635378711b6f86\",\"license\":\"MIT\"},\"contracts/PoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport {Pool} from \\\"./Pool.sol\\\";\\r\\n\\r\\ninterface iTwitterVerify {\\r\\n    function getVerification(address _user) external returns (bool); //TODO why does this need memory?\\r\\n\\r\\n    function getTwitterHandle(address _address)\\r\\n        external\\r\\n        returns (string memory);\\r\\n}\\r\\n\\r\\ninterface linkToken {\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\ninterface iRNG {\\r\\n    function addToWhitelist(address _address) external;\\r\\n}\\r\\n\\r\\ncontract PoolFactory is Ownable {\\r\\n    bool public allowPoolCreation;\\r\\n    mapping(uint256 => address) public poolList;\\r\\n    uint256 public poolCount;\\r\\n    address public TWITTER_VERIFY_ADDRESS;\\r\\n    iTwitterVerify private twitterVerify;\\r\\n    iRNG private rng;\\r\\n    linkToken private link;\\r\\n    address public LINK_CONTRACT_ADDRESS;\\r\\n\\r\\n    /**\\r\\n    * @dev emitted when a pool is created\\r\\n    * @param Pool the address of the pool\\r\\n    * @param PoolOwner the address of the pool owner\\r\\n    * @param SubmissionEndTime unix timestamp for when the submission period is over\\r\\n    * @param FanVotingEndTime unix timestamp for when the fan voting period is over\\r\\n    * @param BrandVotingEndTime unix timestamp for when the brand voting period is over\\r\\n    * @param CampaignEndtime unix timestamp for when the campaign is over\\r\\n    * @param PoolId the id this pool is stored under in poolList\\r\\n    **/\\r\\n    event PoolCreated(\\r\\n        address Pool,\\r\\n        address PoolOwner,\\r\\n        uint256 SubmissionEndTime,\\r\\n        uint256 FanVotingEndTime,\\r\\n        uint256 BrandVotingEndTime,\\r\\n        uint256 CampaignEndtime,\\r\\n        uint256 PoolId\\r\\n    );\\r\\n\\r\\n    constructor(\\r\\n        address _twitterVerifyAddress,\\r\\n        address linkTokenAddress,\\r\\n        address rngAddress\\r\\n    ) {\\r\\n        TWITTER_VERIFY_ADDRESS = _twitterVerifyAddress;\\r\\n        twitterVerify = iTwitterVerify(TWITTER_VERIFY_ADDRESS);\\r\\n        rng = iRNG(rngAddress);\\r\\n        LINK_CONTRACT_ADDRESS = linkTokenAddress;\\r\\n        link = linkToken(LINK_CONTRACT_ADDRESS);\\r\\n    }\\r\\n\\r\\n    function setTwitterVerifyAddress(address _address) external onlyOwner {\\r\\n        TWITTER_VERIFY_ADDRESS = _address;\\r\\n        twitterVerify = iTwitterVerify(TWITTER_VERIFY_ADDRESS);\\r\\n    }\\r\\n\\r\\n    function changePoolCreationBool(bool _bool) external onlyOwner {\\r\\n        allowPoolCreation = _bool;\\r\\n    }\\r\\n\\r\\n    function getPoolAddress(uint256 _index) external view returns (address) {\\r\\n        return poolList[_index];\\r\\n    }\\r\\n\\r\\n    function getPoolCount() external view returns (uint256) {\\r\\n        return poolCount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Allows caller to create a custom brand pool, as long as they are verified, and have approved the contract to spend 0.1 Link \\r\\n    * TODO add require checks to make sure inputs are logical\\r\\n    **/\\r\\n    function createPool(\\r\\n        string memory _poolName,\\r\\n        uint256 _capital,\\r\\n        address _capitalAddress,\\r\\n        address _nftAddress,\\r\\n        uint256 _campaignLength,\\r\\n        uint256 _votingLength,\\r\\n        uint256 _decisionLength,\\r\\n        uint256 _submissionLength\\r\\n    ) external {\\r\\n        require(allowPoolCreation, \\\"Pool creation is currently not allowed!\\\");\\r\\n        require(\\r\\n            twitterVerify.getVerification(msg.sender),\\r\\n            \\\"Caller address is not verified with Twitter!\\\"\\r\\n        );\\r\\n        require(\\r\\n            link.transferFrom(msg.sender, address(rng), 1 * (10**17)),\\r\\n            \\\"Link transferFrom failed!\\\"\\r\\n        );\\r\\n        string memory brandName = twitterVerify.getTwitterHandle(msg.sender);\\r\\n        Pool pool =\\r\\n            new Pool(\\r\\n                _poolName,\\r\\n                brandName,\\r\\n                _capital,\\r\\n                _capitalAddress,\\r\\n                _nftAddress,\\r\\n                msg.sender,\\r\\n                address(rng),\\r\\n                _campaignLength,\\r\\n                _votingLength,\\r\\n                _decisionLength,\\r\\n                _submissionLength\\r\\n            );\\r\\n        uint submissionEndTime;\\r\\n        uint fanVotingEndTime;\\r\\n        uint brandVotingEndTime;\\r\\n        uint campaignEndTime;\\r\\n        uint256 currentTime = block.timestamp;\\r\\n        submissionEndTime = currentTime + _submissionLength;\\r\\n        fanVotingEndTime = submissionEndTime + _votingLength;\\r\\n        brandVotingEndTime = fanVotingEndTime + _decisionLength;\\r\\n        campaignEndTime = currentTime + _campaignLength;\\r\\n        emit PoolCreated(\\r\\n            address(pool),\\r\\n            msg.sender,\\r\\n            submissionEndTime,\\r\\n            fanVotingEndTime,\\r\\n            brandVotingEndTime,\\r\\n            campaignEndTime,\\r\\n            poolCount\\r\\n        );\\r\\n        poolList[poolCount] = address(pool);\\r\\n        poolCount++;\\r\\n        rng.addToWhitelist(address(pool));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbc357a1fcc908c64c402fdd4ac920e06bab97b1e3241aac983f5e5b2a46d7a50\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "events": {
      "PoolCreated(address,address,uint256,uint256,uint256,uint256,uint256)": {
        "details": "emitted when a pool is created",
        "params": {
          "BrandVotingEndTime": "unix timestamp for when the brand voting period is over",
          "CampaignEndtime": "unix timestamp for when the campaign is over",
          "FanVotingEndTime": "unix timestamp for when the fan voting period is over",
          "Pool": "the address of the pool",
          "PoolId": "the id this pool is stored under in poolList*",
          "PoolOwner": "the address of the pool owner",
          "SubmissionEndTime": "unix timestamp for when the submission period is over"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "createPool(string,uint256,address,address,uint256,uint256,uint256,uint256)": {
        "details": "Allows caller to create a custom brand pool, as long as they are verified, and have approved the contract to spend 0.1 Link  TODO add require checks to make sure inputs are logical*"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 591,
        "contract": "contracts/PoolFactory.sol:PoolFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6080,
        "contract": "contracts/PoolFactory.sol:PoolFactory",
        "label": "allowPoolCreation",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6084,
        "contract": "contracts/PoolFactory.sol:PoolFactory",
        "label": "poolList",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 6086,
        "contract": "contracts/PoolFactory.sol:PoolFactory",
        "label": "poolCount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 6088,
        "contract": "contracts/PoolFactory.sol:PoolFactory",
        "label": "TWITTER_VERIFY_ADDRESS",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 6091,
        "contract": "contracts/PoolFactory.sol:PoolFactory",
        "label": "twitterVerify",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(iTwitterVerify)6058"
      },
      {
        "astId": 6094,
        "contract": "contracts/PoolFactory.sol:PoolFactory",
        "label": "rng",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(iRNG)6076"
      },
      {
        "astId": 6097,
        "contract": "contracts/PoolFactory.sol:PoolFactory",
        "label": "link",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(linkToken)6070"
      },
      {
        "astId": 6099,
        "contract": "contracts/PoolFactory.sol:PoolFactory",
        "label": "LINK_CONTRACT_ADDRESS",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(iRNG)6076": {
        "encoding": "inplace",
        "label": "contract iRNG",
        "numberOfBytes": "20"
      },
      "t_contract(iTwitterVerify)6058": {
        "encoding": "inplace",
        "label": "contract iTwitterVerify",
        "numberOfBytes": "20"
      },
      "t_contract(linkToken)6070": {
        "encoding": "inplace",
        "label": "contract linkToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}