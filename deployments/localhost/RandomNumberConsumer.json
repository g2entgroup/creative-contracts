{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "addToWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "userProvidedSeed",
          "type": "uint256"
        }
      ],
      "name": "getRandomNumber",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randomResult",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "randomness",
          "type": "uint256"
        }
      ],
      "name": "rawFulfillRandomness",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seeRandomNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "withdrawLink",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x096cb2ecd699779faefa9556c64019406cebf8604d8c62789acc5a58cf75a83e",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "651212",
    "logsBloom": "0x
    "blockHash": "0xfe6d5cc6358c06fdd48cb100724886699f54370f6961328e9044e811b46635ef",
    "transactionHash": "0x096cb2ecd699779faefa9556c64019406cebf8604d8c62789acc5a58cf75a83e",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "651212",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "1e152a46050221c9e253e1297e385516",
  "metadata": "{\"compiler\":{\"version\":\"0.6.7+commit.b8d736ae\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userProvidedSeed\",\"type\":\"uint256\"}],\"name\":\"getRandomNumber\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomResult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seeRandomNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"withdrawLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{\"constructor\":\"Constructor inherits VRFConsumerBase \\r Network: Mumbai Chainlink VRF Coordinator address: 0x8C7382F9D8f56b33781fE506E897a4F1e2d17255 LINK token address:                0x326C977E6efc84E512bB9C30f76E30c160eD06FB Key Hash: 0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4\",\"getRandomNumber(uint256)\":{\"notice\":\"Requests randomness from a user-provided seed************************************************************************************                                   STOP!                                         *         THIS FUNCTION WILL FAIL IF THIS CONTRACT DOES NOT OWN LINK               *        ----------------------------------------------------------               *        Learn how to obtain testnet LINK and fund this contract:                 *        ------- https://docs.chain.link/docs/acquire-link --------               *        ---- https://docs.chain.link/docs/fund-your-contract -----               *                                                                                 ************************************************************************************\"},\"withdrawLink(address)\":{\"notice\":\"Withdraw LINK from this contract \\r\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/RandomNumberGenerator.sol\":\"RandomNumberConsumer\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.6/VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"./vendor/SafeMathChainlink.sol\\\";\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n\\n  using SafeMathChainlink for uint256;\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(bytes32 requestId, uint256 randomness)\\n    internal virtual;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   * @param _seed seed mixed into the input of the VRF.\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(bytes32 _keyHash, uint256 _fee, uint256 _seed)\\n    internal returns (bytes32 requestId)\\n  {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, _seed));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, _seed, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash].add(1);\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface immutable internal LINK;\\n  address immutable private vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(address _vrfCoordinator, address _link) public {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\",\"keccak256\":\"0xbb84a6411e071d5b04b36d7dda59eaf1cb5a28b3b289757a5ac849ddf9befac3\"},\"@chainlink/contracts/src/v0.6/VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ncontract VRFRequestIDBase {\\n\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(bytes32 _keyHash, uint256 _userSeed,\\n    address _requester, uint256 _nonce)\\n    internal pure returns (uint256)\\n  {\\n    return  uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(\\n    bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\\n\",\"keccak256\":\"0x0c3bd40c63dac8398a979b1228c8ecb1c269c157dd16f2dce2086d2270b65b22\"},\"@chainlink/contracts/src/v0.6/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n  function approve(address spender, uint256 value) external returns (bool success);\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n  function decimals() external view returns (uint8 decimalPlaces);\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n  function name() external view returns (string memory tokenName);\\n  function symbol() external view returns (string memory tokenSymbol);\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n  function transfer(address to, uint256 value) external returns (bool success);\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xe245a7be950c94d87bb775ae9ee9fbd693fbe2987778e6ce0b04605ea44b7b68\"},\"@chainlink/contracts/src/v0.6/vendor/SafeMathChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathChainlink {\\n  /**\\n    * @dev Returns the addition of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `+` operator.\\n    *\\n    * Requirements:\\n    * - Addition cannot overflow.\\n    */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the subtraction of two unsigned integers, reverting on\\n    * overflow (when the result is negative).\\n    *\\n    * Counterpart to Solidity's `-` operator.\\n    *\\n    * Requirements:\\n    * - Subtraction cannot overflow.\\n    */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the multiplication of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `*` operator.\\n    *\\n    * Requirements:\\n    * - Multiplication cannot overflow.\\n    */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the integer division of two unsigned integers. Reverts on\\n    * division by zero. The result is rounded towards zero.\\n    *\\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n    * uses an invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, \\\"SafeMath: division by zero\\\");\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n    * Reverts when dividing by zero.\\n    *\\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\\n    * invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n    return a % b;\\n  }\\n}\\n\",\"keccak256\":\"0x105f5e9491f3d0bbdd4f1c7627eb839d69b944bfd803028a01cc083597692c1f\"},\"contracts/RandomNumberGenerator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.6/VRFConsumerBase.sol\\\";\\r\\n\\r\\ncontract RandomNumberConsumer is VRFConsumerBase {\\r\\n    \\r\\n    bytes32 internal keyHash;\\r\\n    uint256 internal fee;\\r\\n    \\r\\n    uint256 public randomResult;\\r\\n    address[] whitelist;\\r\\n    uint whitelistCount;\\r\\n    address public owner;\\r\\n    \\r\\n    modifier isWhitelist() {\\r\\n        bool pass = false;\\r\\n        for (uint i=0; i<whitelistCount; i++){\\r\\n            if (msg.sender == whitelist[i]){\\r\\n                pass = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        require(pass, \\\"Message sender not found in whitelist!\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"Only the owner can call this function!\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * Constructor inherits VRFConsumerBase\\r\\n     * \\r\\n     * Network: Mumbai\\r\\n     * Chainlink VRF Coordinator address: 0x8C7382F9D8f56b33781fE506E897a4F1e2d17255\\r\\n     * LINK token address:                0x326C977E6efc84E512bB9C30f76E30c160eD06FB\\r\\n     * Key Hash: 0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4\\r\\n     */\\r\\n    constructor() \\r\\n        VRFConsumerBase(\\r\\n            0x8C7382F9D8f56b33781fE506E897a4F1e2d17255, // VRF Coordinator\\r\\n            0x326C977E6efc84E512bB9C30f76E30c160eD06FB  // LINK Token\\r\\n        ) public\\r\\n    {\\r\\n        keyHash = 0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4;\\r\\n        fee = 0.1 * 10 ** 18; // 0.1 LINK\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n    \\r\\n    /** \\r\\n     * Requests randomness from a user-provided seed\\r\\n     ************************************************************************************\\r\\n     *                                    STOP!                                         * \\r\\n     *         THIS FUNCTION WILL FAIL IF THIS CONTRACT DOES NOT OWN LINK               *\\r\\n     *         ----------------------------------------------------------               *\\r\\n     *         Learn how to obtain testnet LINK and fund this contract:                 *\\r\\n     *         ------- https://docs.chain.link/docs/acquire-link --------               *\\r\\n     *         ---- https://docs.chain.link/docs/fund-your-contract -----               *\\r\\n     *                                                                                  *\\r\\n     ************************************************************************************/\\r\\n    function getRandomNumber(uint256 userProvidedSeed) public isWhitelist returns (bytes32 requestId) {\\r\\n        require(LINK.balanceOf(address(this)) >= fee, \\\"Not enough LINK - fill contract with faucet\\\");\\r\\n        return requestRandomness(keyHash, fee, userProvidedSeed);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Callback function used by VRF Coordinator\\r\\n     */\\r\\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\\r\\n        randomResult = randomness;\\r\\n    }\\r\\n    \\r\\n    function seeRandomNumber() external returns(uint) {\\r\\n        return randomResult;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * Withdraw LINK from this contract\\r\\n     * \\r\\n     */\\r\\n    function withdrawLink(address _address) external onlyOwner {\\r\\n        require(LINK.transfer(_address, LINK.balanceOf(address(this))), \\\"Unable to transfer\\\");\\r\\n    }\\r\\n    \\r\\n    function addToWhitelist(address _address) external onlyOwner{\\r\\n        whitelist.push(_address);\\r\\n        whitelistCount++;\\r\\n    }\\r\\n    \\r\\n    function transferOwnership(address _address) external  onlyOwner {\\r\\n        owner = _address;\\r\\n    }\\r\\n    \\r\\n}\",\"keccak256\":\"0x628c00f11277b5d9b3c4622f309279df40d1f22c1d0936ceecdafc1299d94e53\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b507f8c7382f9d8f56b33781fe506e897a4f1e2d1725500000000000000000000000060a0527f326c977e6efc84e512bb9c30f76e30c160ed06fb0000000000000000000000006080527f6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a460015567016345785d8a0000600255600680546001600160a01b0319163317905573326c977e6efc84e512bb9c30f76e30c160ed06fb738c7382f9d8f56b33781fe506e897a4f1e2d172556109986100f160003980610357528061068f52508061020b5280610480528061066052506109986000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806394985ddd1161005b57806394985ddd146100fb578063b37217a41461011e578063e43252d71461013b578063f2fde38b1461016157610088565b806322cce6891461008d57806342619f66146100a75780638da5cb5b146100af57806390e9ca7f146100d3575b600080fd5b610095610187565b60408051918252519081900360200190f35b61009561018d565b6100b7610193565b604080516001600160a01b039092168252519081900360200190f35b6100f9600480360360208110156100e957600080fd5b50356001600160a01b03166101a2565b005b6100f96004803603604081101561011157600080fd5b508035906020013561034c565b6100956004803603602081101561013457600080fd5b50356103d7565b6100f96004803603602081101561015157600080fd5b50356001600160a01b0316610545565b6100f96004803603602081101561017757600080fd5b50356001600160a01b03166105eb565b60035490565b60035481565b6006546001600160a01b031681565b6006546001600160a01b031633146101eb5760405162461bcd60e51b81526004018080602001828103825260268152602001806108ec6026913960400191505060405180910390fd5b604080516370a0823160e01b815230600482015290516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163a9059cbb91849184916370a0823191602480820192602092909190829003018186803b15801561025c57600080fd5b505afa158015610270573d6000803e3d6000fd5b505050506040513d602081101561028657600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091525160448083019260209291908290030181600087803b1580156102d757600080fd5b505af11580156102eb573d6000803e3d6000fd5b505050506040513d602081101561030157600080fd5b5051610349576040805162461bcd60e51b81526020600482015260126024820152712ab730b13632903a37903a3930b739b332b960711b604482015290519081900360640190fd5b50565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103c9576040805162461bcd60e51b815260206004820152601f60248201527f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c00604482015290519081900360640190fd5b6103d38282610656565b5050565b600080805b60055481101561042057600481815481106103f357fe5b6000918252602090912001546001600160a01b03163314156104185760019150610420565b6001016103dc565b508061045d5760405162461bcd60e51b815260040180806020018281038252602681526020018061093d6026913960400191505060405180910390fd5b600254604080516370a0823160e01b815230600482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a08231916024808301926020929190829003018186803b1580156104c657600080fd5b505afa1580156104da573d6000803e3d6000fd5b505050506040513d60208110156104f057600080fd5b5051101561052f5760405162461bcd60e51b815260040180806020018281038252602b815260200180610912602b913960400191505060405180910390fd5b61053e6001546002548561065c565b9392505050565b6006546001600160a01b0316331461058e5760405162461bcd60e51b81526004018080602001828103825260268152602001806108ec6026913960400191505060405180910390fd5b60048054600180820183556000929092527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b0319166001600160a01b039390931692909217909155600580549091019055565b6006546001600160a01b031633146106345760405162461bcd60e51b81526004018080602001828103825260268152602001806108ec6026913960400191505060405180910390fd5b600680546001600160a01b0319166001600160a01b0392909216919091179055565b60035550565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634000aea07f000000000000000000000000000000000000000000000000000000000000000085878660405160200180838152602001828152602001925050506040516020818303038152906040526040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610741578181015183820152602001610729565b50505050905090810190601f16801561076e5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15801561078f57600080fd5b505af11580156107a3573d6000803e3d6000fd5b505050506040513d60208110156107b957600080fd5b50506000848152602081905260408120546107d99086908590309061081e565b6000868152602081905260409020549091506107fc90600163ffffffff61086516565b60008681526020819052604090205561081585826108bf565b95945050505050565b60408051602080820196909652808201949094526001600160a01b039290921660608401526080808401919091528151808403909101815260a09092019052805191012090565b60008282018381101561053e576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60408051602080820194909452808201929092528051808303820181526060909201905280519101209056fe4f6e6c7920746865206f776e65722063616e2063616c6c20746869732066756e6374696f6e214e6f7420656e6f756768204c494e4b202d2066696c6c20636f6e74726163742077697468206661756365744d6573736167652073656e646572206e6f7420666f756e6420696e2077686974656c69737421a26469706673582212204cd8cc95cc8e4b5b1a2b2265906fe78c30438558dd63d7ee65783c344985db7164736f6c63430006070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c806394985ddd1161005b57806394985ddd146100fb578063b37217a41461011e578063e43252d71461013b578063f2fde38b1461016157610088565b806322cce6891461008d57806342619f66146100a75780638da5cb5b146100af57806390e9ca7f146100d3575b600080fd5b610095610187565b60408051918252519081900360200190f35b61009561018d565b6100b7610193565b604080516001600160a01b039092168252519081900360200190f35b6100f9600480360360208110156100e957600080fd5b50356001600160a01b03166101a2565b005b6100f96004803603604081101561011157600080fd5b508035906020013561034c565b6100956004803603602081101561013457600080fd5b50356103d7565b6100f96004803603602081101561015157600080fd5b50356001600160a01b0316610545565b6100f96004803603602081101561017757600080fd5b50356001600160a01b03166105eb565b60035490565b60035481565b6006546001600160a01b031681565b6006546001600160a01b031633146101eb5760405162461bcd60e51b81526004018080602001828103825260268152602001806108ec6026913960400191505060405180910390fd5b604080516370a0823160e01b815230600482015290516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163a9059cbb91849184916370a0823191602480820192602092909190829003018186803b15801561025c57600080fd5b505afa158015610270573d6000803e3d6000fd5b505050506040513d602081101561028657600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091525160448083019260209291908290030181600087803b1580156102d757600080fd5b505af11580156102eb573d6000803e3d6000fd5b505050506040513d602081101561030157600080fd5b5051610349576040805162461bcd60e51b81526020600482015260126024820152712ab730b13632903a37903a3930b739b332b960711b604482015290519081900360640190fd5b50565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103c9576040805162461bcd60e51b815260206004820152601f60248201527f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c00604482015290519081900360640190fd5b6103d38282610656565b5050565b600080805b60055481101561042057600481815481106103f357fe5b6000918252602090912001546001600160a01b03163314156104185760019150610420565b6001016103dc565b508061045d5760405162461bcd60e51b815260040180806020018281038252602681526020018061093d6026913960400191505060405180910390fd5b600254604080516370a0823160e01b815230600482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a08231916024808301926020929190829003018186803b1580156104c657600080fd5b505afa1580156104da573d6000803e3d6000fd5b505050506040513d60208110156104f057600080fd5b5051101561052f5760405162461bcd60e51b815260040180806020018281038252602b815260200180610912602b913960400191505060405180910390fd5b61053e6001546002548561065c565b9392505050565b6006546001600160a01b0316331461058e5760405162461bcd60e51b81526004018080602001828103825260268152602001806108ec6026913960400191505060405180910390fd5b60048054600180820183556000929092527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b0319166001600160a01b039390931692909217909155600580549091019055565b6006546001600160a01b031633146106345760405162461bcd60e51b81526004018080602001828103825260268152602001806108ec6026913960400191505060405180910390fd5b600680546001600160a01b0319166001600160a01b0392909216919091179055565b60035550565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634000aea07f000000000000000000000000000000000000000000000000000000000000000085878660405160200180838152602001828152602001925050506040516020818303038152906040526040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610741578181015183820152602001610729565b50505050905090810190601f16801561076e5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15801561078f57600080fd5b505af11580156107a3573d6000803e3d6000fd5b505050506040513d60208110156107b957600080fd5b50506000848152602081905260408120546107d99086908590309061081e565b6000868152602081905260409020549091506107fc90600163ffffffff61086516565b60008681526020819052604090205561081585826108bf565b95945050505050565b60408051602080820196909652808201949094526001600160a01b039290921660608401526080808401919091528151808403909101815260a09092019052805191012090565b60008282018381101561053e576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60408051602080820194909452808201929092528051808303820181526060909201905280519101209056fe4f6e6c7920746865206f776e65722063616e2063616c6c20746869732066756e6374696f6e214e6f7420656e6f756768204c494e4b202d2066696c6c20636f6e74726163742077697468206661756365744d6573736167652073656e646572206e6f7420666f756e6420696e2077686974656c69737421a26469706673582212204cd8cc95cc8e4b5b1a2b2265906fe78c30438558dd63d7ee65783c344985db7164736f6c63430006070033",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {
      "constructor": "Constructor inherits VRFConsumerBase \r Network: Mumbai Chainlink VRF Coordinator address: 0x8C7382F9D8f56b33781fE506E897a4F1e2d17255 LINK token address:                0x326C977E6efc84E512bB9C30f76E30c160eD06FB Key Hash: 0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4",
      "getRandomNumber(uint256)": {
        "notice": "Requests randomness from a user-provided seed************************************************************************************                                   STOP!                                         *         THIS FUNCTION WILL FAIL IF THIS CONTRACT DOES NOT OWN LINK               *        ----------------------------------------------------------               *        Learn how to obtain testnet LINK and fund this contract:                 *        ------- https://docs.chain.link/docs/acquire-link --------               *        ---- https://docs.chain.link/docs/fund-your-contract -----               *                                                                                 ************************************************************************************"
      },
      "withdrawLink(address)": {
        "notice": "Withdraw LINK from this contract \r"
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 797,
        "contract": "contracts/RandomNumberGenerator.sol:RandomNumberConsumer",
        "label": "nonces",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 2262,
        "contract": "contracts/RandomNumberGenerator.sol:RandomNumberConsumer",
        "label": "keyHash",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 2264,
        "contract": "contracts/RandomNumberGenerator.sol:RandomNumberConsumer",
        "label": "fee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2266,
        "contract": "contracts/RandomNumberGenerator.sol:RandomNumberConsumer",
        "label": "randomResult",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2269,
        "contract": "contracts/RandomNumberGenerator.sol:RandomNumberConsumer",
        "label": "whitelist",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2271,
        "contract": "contracts/RandomNumberGenerator.sol:RandomNumberConsumer",
        "label": "whitelistCount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2273,
        "contract": "contracts/RandomNumberGenerator.sol:RandomNumberConsumer",
        "label": "owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}